# Порівняння алгоритмів DFS та BFS для пошуку шляхів у графі Київського метрополітену

## Опис завдання

Реалізовано алгоритми пошуку в глибину (DFS) та пошуку в ширину (BFS) для знаходження шляхів у графі, який моделює Київський метрополітен. Метою було порівняти результати обох алгоритмів та пояснити різницю в отриманих шляхах.

## Реалізація

- **Граф метрополітену** побудовано на основі даних про станції та їх сполучення з першого завдання.
- **Алгоритми**:
  - **DFS** реалізовано за допомогою стеку та рекурсивного обходу вершин.
  - **BFS** реалізовано за допомогою черги та послідовного обходу рівнів графа.
- **Приклад пошуку**: знайдено шляхи між станціями 'Akademmistechko' та 'Chervonyi Khutir'.

## Результати

- **Шлях DFS**:
  - Містить зайві повернення та повторні відвідування станцій.
  - Більш довгий та не оптимальний.
- **Шлях BFS**:
  - Найкоротший можливий шлях за кількістю станцій.
  - Не містить повторних відвідувань.

## Пояснення різниці

- **Алгоритм DFS** досліджує граф в глибину, що може призвести до обходу довших шляхів та повторного відвідування вершин.
- **Алгоритм BFS** досліджує граф в ширину, гарантуючи знаходження найкоротшого шляху між двома вершинами у неважених графах.

## Висновки

- **BFS** є більш ефективним для пошуку найкоротших шляхів у транспортних мережах, де важливо мінімізувати кількість пересадок чи станцій.
- **DFS** може бути корисним для повного обходу графа або в задачах, де потрібно знайти всі можливі шляхи.
- У контексті навігації в метрополітені, BFS відображає реальну поведінку пасажирів, які шукають найшвидший маршрут.

## Запуск програми

Встановіть необхідні бібліотеки:
   pip install networkx matplotlib
